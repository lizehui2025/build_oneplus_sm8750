name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_ace5_pro'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_a:
        description: "开启BBG防格机模块"
        required: false
        default: true
        type: boolean

      enable_feature_b:
         description: "选择网络调度"
         required: false
         type: choice
         options:
            - 'FQ_CODEL'
            - 'BBR'
         default: 'FQ_CODEL'

      enable_global_o3:
        description: "启用全局O3优化 (激进性能优化)"
        required: false
        default: true
        type: boolean

      enable_lto_aggressive:
        description: "启用激进LTO优化 (可能增加编译时间)"
        required: false
        default: false
        type: boolean

      enable_graphite_optimizations:
        description: "启用Graphite优化 (额外性能提升)"
        required: false
        default: false
        type: boolean
      
       


jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: ⚙️ Set REPO_MANIFEST (设置对应机型配置文件)
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            realme_GT7pro_Speed)
              echo 'DEFAULT_SUFFIX=-android15-8-g013ec21bba94-abogki383916444-4k' >> $GITHUB_ENV
              ;;
            realme_GT7)
              echo 'DEFAULT_SUFFIX=-android15-8-g06c41a4a6e98-abogki395793266-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro)
              echo 'DEFAULT_SUFFIX=-android15-8-gc6f5283046c6-ab12364222-4k' >> $GITHUB_ENV
              ;;
            oneplus_13t)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
            oneplus_pad_2_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g7b1f455c7143-ab13591283-4k' >> $GITHUB_ENV
              ;;
            oneplus_ace5_pro | oneplus_13 | oneplus_ace5_ultra)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
          esac
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              realme_GT7)
                echo 'KERNEL_TIME=Mon Jan 20 03:24:58 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro)
                echo 'KERNEL_TIME=Fri Sep 13 02:08:57 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Jun  3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_ace5_pro | oneplus_13 | oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi
          
      - name: 🚀 Maximize Build Space  (最大化构建空间)
        if: ${{ contains(fromJson('["oneplus_pad_2_pro","realme_GT7pro","realme_GT7pro_Speed"]'), env.DEVICES_NAME) }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: ⚙️ Set device-specific CCACHE_DIR (设置对应机型Cceche路径)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git (设置下载账户)
        run: |
          git config --global user.name "Q1udaoyu"
          git config --global user.email "sucisama2888@gmail.com"

      - name: 🛠 Configure APT caching (配置APT缓存)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages (缓存APT包)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies (安装依赖)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "✅ 依赖安装完成"
          
      - name: 📥 Restore ccache (载入 机型：${{ env.DEVICES_NAME }}的 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache (如果是第一次运行则初始化Cceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi


      - name: 📥 Install repo tool (下载repo工具)
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync (初始化repo并同步内核源码)
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Set Baseband-guard (配置bbg)
        if: ${{ inputs.enable_feature_a }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "baseband_guard"
         
      - name: ⚙️ Set SuKiSU Ultra (设置SuKiSU Ultra)
        run: |
            mkdir -p kernel_workspace/kernel_platform
            cd kernel_workspace/kernel_platform
            
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
            cd KernelSU
            KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
             cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ./
            chmod +x setup.bin
            if [ ! -f "kernel/Makefile" ]; then
              echo "::error ::kernel/Makefile"
              ls -la
              exit 1
            fi
            ./setup.bin
      - name: 🔧 Set up SUSFS (配置 SUSFS)
        run: |
           cd kernel_workspace
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
            git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
            
            cd kernel_platform        
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
            cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
            if [ "$DEVICES_NAME" = "oneplus_ace5_ultra" ] || [ "${REPO_MANIFEST}" != "oneplus_13t" ]; then
            sed -i 's/^\(SUBLEVEL[[:space:]]*=[[:space:]]*\).*/\166/' ./common/Makefile
            fi
            # Apply patches
            cd ./common
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            if [ "${DEVICES_NAME}" = "oneplus_ace5_ultra" ] || [ "${DEVICES_NAME}" = "realme_GT7" ]; then
              echo "跳过 LZ4 操作（匹配到 $DEVICES_NAME）"
            else
                files=(
                    "lib/lz4/lz4_compress.c"
                    "lib/lz4/lz4_decompress.c"
                    "lib/lz4/lz4defs.h"
                    "lib/lz4/lz4hc_compress.c"
                )
                for file in "${files[@]}"; do
                    if [ -e "$file" ]; then
                        rm "$file"
                    fi
                done
                ./main.bin "setup_lz4"
            fi
            # ./main.bin "SerialID_Check" "${{ github.event.inputs.custom_Serialid_suffix }}"
            rm -rf ./main.bin
            
            if [ "${REPO_MANIFEST}" = "realme_GT7pro_Speed" ] || [ "${REPO_MANIFEST}" = "realme_GT7pro" ]; then
                sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
                sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
            fi
            
            patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
            cp ../../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
            
            echo "完成"

      - name: 🔧 Apply global optimization patches (应用全局优化补丁)
        env:
          ENABLE_GLOBAL_O3: ${{ inputs.enable_global_o3 }}
          ENABLE_GRAPHITE: ${{ inputs.enable_graphite_optimizations }}
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # 备份原Makefile
          cp Makefile Makefile.backup
          
          if [ "$ENABLE_GLOBAL_O3" = "true" ]; then
            echo "应用全局O3优化..."
            
            # 修改顶层Makefile使用O3优化
            sed -i 's/-O2/-O3/g' Makefile
            
            # 为不适合O3的组件单独设置O2优化级别
            # 这些组件通常包含复杂的内联汇编或对优化敏感
            
            # 创建排除列表的配置
            cat > o3_exclusions.cfg << 'EOF'
            # 不适用O3优化的组件列表
            # 这些组件使用O2优化以保证稳定性
            
            # 内存管理核心组件 (对优化敏感)
            KBUILD_CFLAGS_mm/ += -O2
            KBUILD_CFLAGS_mm/zsmalloc.o += -O2
            KBUILD_CFLAGS_mm/zpool.o += -O2
            
            # 特定架构代码 (包含复杂汇编)
            KBUILD_CFLAGS_arch/arm64/crypto/ += -O2
            KBUILD_CFLAGS_arch/arm64/kernel/ += -O2
            
            # 加密组件 (安全性关键)
            KBUILD_CFLAGS_crypto/ += -O2
            
            # 特定驱动 (已知问题)
            KBUILD_CFLAGS_drivers/gpu/ += -O2
            KBUILD_CFLAGS_drivers/media/ += -O2
            KBUILD_CFLAGS_drivers/video/ += -O2
            
            # 网络核心 (稳定性关键)
            KBUILD_CFLAGS_net/core/ += -O2
            KBUILD_CFLAGS_net/ipv4/ += -O2
            KBUILD_CFLAGS_net/ipv6/ += -O2
            
            # 文件系统核心
            KBUILD_CFLAGS_fs/ext4/ += -O2
            KBUILD_CFLAGS_fs/f2fs/ += -O2
            
            # 调度器核心 (稳定性关键)
            KBUILD_CFLAGS_kernel/sched/ += -O2
            EOF
            
            # 应用排除配置到Makefile
            cat o3_exclusions.cfg >> Makefile
            
            echo "全局O3优化已应用，特定组件使用O2"
          else
            echo "使用默认O2优化"
          fi
          
          if [ "$ENABLE_GRAPHITE" = "true" ]; then
            echo "启用Graphite优化..."
            # 添加Graphite优化标志
            sed -i '/^KBUILD_CFLAGS\s*+=/a KBUILD_CFLAGS += -fgraphite-identity -floop-nest-optimize -floop-parallelize-all -ftree-parallelize-loops=4' Makefile
            echo "Graphite优化已启用"
          fi

      - name: 🔧 Cache HMBird patch (缓存HMBird补丁)
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      
      - name: 🔧 Apply HMBird GKI patch (写入单Boot开机补丁)
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"

          
      - name: 🔧 Set gki_defconfig (设置编译配置)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}       
        run: |
          cd kernel_workspace/kernel_platform
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "setup_gki_config" "$ENABLE_B"
          rm -rf ./main.bin
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Set Kernel name (设置内核名称)
        env:
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          
      - name: 🔧 Add sched_ext (写入风驰补丁)
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/showdo/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  
          

      - name: 🔨 Build Kernel with aggressive optimizations (使用激进优化构建内核)
        env:
          ENABLE_GLOBAL_O3: ${{ inputs.enable_global_o3 }}
          ENABLE_LTO_AGGRESSIVE: ${{ inputs.enable_lto_aggressive }}
          ENABLE_GRAPHITE: ${{ inputs.enable_graphite_optimizations }}
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          cd kernel_workspace/kernel_platform/common
          
          # 设置优化标志
          OPTIMIZATION_FLAGS="-O2"
          LTO_FLAGS="full"
          EXTRA_OPT_FLAGS=""
          
          if [ "$ENABLE_GLOBAL_O3" = "true" ]; then
            echo "启用全局O3优化"
            OPTIMIZATION_FLAGS="-O3"
            # 添加针对O3的额外优化标志
            EXTRA_OPT_FLAGS="KCFLAGS+=-O3 KCFLAGS+=-fomit-frame-pointer KCFLAGS+=-funroll-loops"
          fi
          
          if [ "$ENABLE_LTO_AGGRESSIVE" = "true" ]; then
            echo "启用激进LTO优化"
            LTO_FLAGS="thin"
            EXTRA_OPT_FLAGS="$EXTRA_OPT_FLAGS KCFLAGS+=-flto=thin KCFLAGS+=-fuse-ld=lld"
          else
            EXTRA_OPT_FLAGS="$EXTRA_OPT_FLAGS KCFLAGS+=-flto=full"
          fi
          
          if [ "$ENABLE_GRAPHITE" = "true" ]; then
            echo "启用Graphite优化"
            EXTRA_OPT_FLAGS="$EXTRA_OPT_FLAGS KCFLAGS+=-fgraphite-identity KCFLAGS+=-floop-nest-optimize KCFLAGS+=-floop-parallelize-all KCFLAGS+=-ftree-parallelize-loops=4"
          fi
          
          # 性能调优标志
          EXTRA_OPT_FLAGS="$EXTRA_OPT_FLAGS KCFLAGS+=-ftree-vectorize KCFLAGS+=-fno-semantic-interposition KCFLAGS+=-fno-trapping-math"
          
          echo "使用优化标志: $OPTIMIZATION_FLAGS"
          echo "LTO设置: $LTO_FLAGS"
          echo "额外标志: $EXTRA_OPT_FLAGS"
          
          # 构建配置
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld \
            HOSTLD=ld.lld O=out $EXTRA_OPT_FLAGS LTO=$LTO_FLAGS gki_defconfig
          
          # 构建内核
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld \
            HOSTLD=ld.lld O=out $EXTRA_OPT_FLAGS LTO=$LTO_FLAGS Image
       
      - name: 📦 Make AnyKernel3 (创建Anykernel3)
        run: |
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "make_anykernel3"
          rm -rf ./main.bin
          
      - name: 📤 Upload AnyKernel3 (上传 Anykernel3)
        uses: actions/upload-artifact@v4
        with:
         name: AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU_Optimized
         path: ./AnyKernel3/*