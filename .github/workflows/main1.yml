name: Build_oneplus_sm8750

on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_ace5_pro'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_a:
        description: "开启BBG防格机模块"
        required: false
        default: true
        type: boolean

      enable_feature_b:
        description: "选择网络调度"
        required: false
        type: choice
        options:
          - 'FQ_CODEL'
          - 'BBR'
        default: 'FQ_CODEL'

jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Set REPO_MANIFEST (设置对应机型配置文件)
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            realme_GT7pro_Speed)
              echo 'DEFAULT_SUFFIX=-android15-8-g013ec21bba94-abogki383916444-4k' >> $GITHUB_ENV
              ;;
            realme_GT7)
              echo 'DEFAULT_SUFFIX=-android15-8-g06c41a4a6e98-abogki395793266-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro)
              echo 'DEFAULT_SUFFIX=-android15-8-gc6f5283046c6-ab12364222-4k' >> $GITHUB_ENV
              ;;
            oneplus_13t)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
            oneplus_pad_2_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g7b1f455c7143-ab13591283-4k' >> $GITHUB_ENV
              ;;
            oneplus_ace5_pro | oneplus_13 | oneplus_ace5_ultra)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
          esac
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              realme_GT7)
                echo 'KERNEL_TIME=Mon Jan 20 03:24:58 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro)
                echo 'KERNEL_TIME=Fri Sep 13 02:08:57 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Jun  3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_ace5_pro | oneplus_13 | oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: 🚀 Maximize Build Space (最大化构建空间)
        if: ${{ contains(fromJson('["oneplus_pad_2_pro","realme_GT7pro","realme_GT7pro_Speed"]'), env.DEVICES_NAME) }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: ⚙️ Set device-specific CCACHE_DIR (设置对应机型Cceche路径)
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git (设置下载账户)
        run: |
          git config --global user.name "Q1udaoyu"
          git config --global user.email "sucisama2888@gmail.com"

      - name: 🛠 Configure APT caching (配置APT缓存)
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages (缓存APT包)
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies (安装依赖)
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "✅ 依赖安装完成"

      - name: 📥 Restore ccache (载入 机型：${{ env.DEVICES_NAME }}的 ccache 缓存)
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache (如果是第一次运行则初始化Cceche)
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi

      - name: 📥 Install repo tool (下载repo工具)
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync (初始化repo并同步内核源码)
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Set Baseband-guard (配置bbg)
        if: ${{ inputs.enable_feature_a }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "baseband_guard"

      - name: ⚙️ Set SuKiSU Ultra (设置SuKiSU Ultra)
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          cd KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ./
          chmod +x setup.bin
          if [ ! -f "kernel/Makefile" ]; then
            echo "::error ::kernel/Makefile"
            ls -la
            exit 1
          fi
          ./setup.bin

      - name: 🔧 Set up SUSFS (配置 SUSFS)
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          if [ "$DEVICES_NAME" = "oneplus_ace5_ultra" ] || [ "${REPO_MANIFEST}" != "oneplus_13t" ]; then
            sed -i 's/^\(SUBLEVEL[[:space:]]*=[[:space:]]*\).*/\166/' ./common/Makefile
          fi
          # Apply patches
          cd ./common
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          if [ "${DEVICES_NAME}" = "oneplus_ace5_ultra" ] || [ "${DEVICES_NAME}" = "realme_GT7" ]; then
            echo "跳过 LZ4 操作（匹配到 $DEVICES_NAME）"
          else
            files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
            )
            for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                rm "$file"
              fi
            done
            ./main.bin "setup_lz4"
          fi
          # ./main.bin "SerialID_Check" "${{ github.event.inputs.custom_Serialid_suffix }}"
          rm -rf ./main.bin
          
          if [ "${REPO_MANIFEST}" = "realme_GT7pro_Speed" ] || [ "${REPO_MANIFEST}" = "realme_GT7pro" ]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          fi
          
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
          patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
          
          echo "完成"

      - name: 🔧 Cache HMBird patch (缓存HMBird补丁)
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1

      - name: 🔧 Apply HMBird GKI patch (写入单Boot开机补丁)
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"

      - name: 🔧 Set gki_defconfig (设置编译配置)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}
        run: |
          cd kernel_workspace/kernel_platform
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "setup_gki_config" "$ENABLE_B"
          rm -rf ./main.bin
          #Remove check_defconfig
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 Configure Kernel Optimization (配置内核优化)
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # 创建优化的配置文件
          cat > optimization_config.cfg << 'EOF'
          # 性能优化配置
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          # CONFIG_CC_OPTIMIZE_FOR_SIZE is not set
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y
          
          # 调试信息优化 - 保持基本调试但移除冗余信息
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_REDUCED=y
          # CONFIG_DEBUG_INFO_DWARF5 is not set
          # CONFIG_DEBUG_INFO_COMPRESSED_ZSTD is not set
          CONFIG_DEBUG_INFO_NONE=y
          # CONFIG_DEBUG_INFO_BTF is not set
          # CONFIG_DEBUG_INFO_BTF_MODULES is not set
          
          # 性能相关优化
          CONFIG_ARCH_MMAP_RND_BITS=32
          CONFIG_ARCH_MMAP_RND_COMPAT_BITS=16
          CONFIG_SCHED_AUTOGROUP=y
          CONFIG_CC_HAS_AUTO_VAR_INIT_ZERO=n
          CONFIG_INIT_STACK_NONE=y
          
          # 内存优化
          CONFIG_LRU_GEN=y
          CONFIG_LRU_GEN_ENABLED=y
          CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=y
          CONFIG_COMPACTION=y
          CONFIG_PAGE_COUNTER=y
          
          # 调度器优化
          CONFIG_SCHED_CORE=y
          CONFIG_SCHED_CLUSTER=y
          CONFIG_SCHED_DEBUG=n
          CONFIG_SCHED_STACK_END_CHECK=n
          
          # 网络优化
          CONFIG_TCP_CONG_BBR2=y
          CONFIG_NET_SCH_FQ_CODEL=y
          CONFIG_IP_MULTIPLE_TABLES=y
          
          # 文件系统优化
          CONFIG_FS_ENCRYPTION=y
          CONFIG_F2FS_FS=y
          CONFIG_F2FS_FS_SECURITY=y
          CONFIG_F2FS_FS_COMPRESSION=y
          
          # 电源管理优化
          CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y
          CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
          CONFIG_CPU_FREQ_GOV_ONDEMAND=n
          CONFIG_CPU_FREQ_GOV_CONSERVATIVE=n
          
          # 内核大小优化
          CONFIG_IKHEADERS=m
          CONFIG_KALLSYMS=y
          CONFIG_KALLSYMS_ALL=y
          
          # 编译器优化
          CONFIG_CC_IS_CLANG=y
          CONFIG_CLANG_VERSION=170000
          CONFIG_LD_IS_LLD=y
          CONFIG_LTO_CLANG_FULL=y
          EOF
          
          # 应用优化配置到 gki_defconfig
          if [ -f "arch/arm64/configs/gki_defconfig" ]; then
            # 备份原始配置
            cp arch/arm64/configs/gki_defconfig arch/arm64/configs/gki_defconfig.backup
            
            # 应用优化配置
            while IFS= read -r line; do
              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
                config_name=$(echo "$line" | cut -d'=' -f1)
                config_value=$(echo "$line" | cut -d'=' -f2)
                
                # 移除现有配置
                grep -v "^$config_name=" arch/arm64/configs/gki_defconfig > temp_config
                mv temp_config arch/arm64/configs/gki_defconfig
                
                # 添加新配置
                echo "$config_name=$config_value" >> arch/arm64/configs/gki_defconfig
              fi
            done < optimization_config.cfg
            
            echo "✅ 内核优化配置已应用"
          else
            echo "❌ 未找到 gki_defconfig 文件"
          fi

      - name: ⚡ Apply Local O3 Optimization (应用局部O3优化)
        run: |
          cd kernel_workspace/kernel_platform/common
          
          # 全局启用O3优化
          echo "启用全局O3优化..."
          find . -name "Makefile" -type f -exec sed -i 's/-O2/-O3/g' {} +
          
          # 为稳定性关键模块降级为O2优化
          echo "为关键模块应用O2优化..."
          
          # 设备驱动 - 时序敏感性
          for dir in drivers/base drivers/char drivers/block drivers/mmc drivers/usb; do
            if [ -d "$dir" ]; then
              find "$dir" -name "Makefile" -type f -exec sed -i 's/-O3/-O2/g' {} +
            fi
          done
          
          # 中断和异常处理
          for dir in kernel/irq arch/arm64/kernel; do
            if [ -d "$dir" ]; then
              find "$dir" -name "Makefile" -type f -exec sed -i 's/-O3/-O2/g' {} +
            fi
          done
          
          # 电源管理和休眠
          if [ -d "kernel/power" ]; then
            find kernel/power -name "Makefile" -type f -exec sed -i 's/-O3/-O2/g' {} +
          fi
          
          # 锁和同步原语
          if [ -d "kernel/locking" ]; then
            find kernel/locking -name "Makefile" -type f -exec sed -i 's/-O3/-O2/g' {} +
          fi
          
          # 内存管理敏感部分
          if [ -f "mm/Makefile" ]; then
            sed -i 's/^CFLAGS_page_alloc\.o = .*/&-O2/' mm/Makefile 2>/dev/null || true
            sed -i 's/^CFLAGS_slub\.o = .*/&-O2/' mm/Makefile 2>/dev/null || true
          fi
          
          # 为性能关键模块保持O3优化并添加额外优化标志
          echo "为性能关键模块应用激进优化..."
          for dir in crypto lib kernel/sched; do
            if [ -d "$dir" ]; then
              find "$dir" -name "Makefile" -type f -exec sed -i 's/-O3/-O3 -fno-strict-aliasing/g' {} +
            fi
          done
          
          echo "局部O3优化配置完成"
          echo "全局: O3优化"
          echo "降级为O2: 驱动、中断、电源管理、锁机制"
          echo "激进O3: 加密、调度器、库函数"

      - name: 🔧 Set Kernel name (设置内核名称)
        env:
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion

      - name: 🔧 Add sched_ext (写入风驰补丁)
        if: ${{ inputs.enable_feature_z }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/showdo/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched

      - name: 🔨 Build Kernel with Detailed Logging (详细日志构建内核)
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          
          cd kernel_workspace/kernel_platform/common
          
          # 启用详细构建日志
          export KCFLAGS="-O3 -ftree-vectorize -funroll-loops -Wno-error -mllvm -polly -mllvm -polly-parallel"
          export KBUILD_VERBOSE=1
          
          # 生成配置并构建，同时记录详细日志
          {
            echo "=== 开始内核构建 ==="
            date
            echo "构建环境变量:"
            echo "KCFLAGS: $KCFLAGS"
            echo "CC: $(which clang)"
            echo "CROSS_COMPILE: $(which aarch64-linux-gnu-)"
            echo "CCACHE_DIR: $CCACHE_DIR"
            
            # 生成配置
            echo "=== 生成配置 ==="
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
              CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
              PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
              LD=ld.lld HOSTLD=ld.lld O=out LTO=full gki_defconfig
            
            # 验证配置
            echo "=== 验证优化配置 ==="
            grep -E "CONFIG_CC_OPTIMIZE|CONFIG_DEBUG_INFO|CONFIG_LTO|CONFIG_SCHED" out/.config | head -20
            
            # 构建内核
            echo "=== 开始内核编译 ==="
            time make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
              CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
              PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
              LD=ld.lld HOSTLD=ld.lld O=out LTO=full Image 2>&1
            
            echo "=== 构建完成 ==="
            date
          } | tee build.log
          
          # 保存构建日志
          echo "构建日志已保存到 build.log"

      - name: 🔍 Enhanced Kernel Optimization Verification (增强内核优化验证)
        run: |
          echo "=== 增强优化验证 ==="
          cd kernel_workspace/kernel_platform/common
          
          # 检查最终配置文件
          echo "📋 最终配置检查:"
          if [ -f "out/.config" ]; then
            echo "优化级别:"
            grep "CONFIG_CC_OPTIMIZE" out/.config || echo "未设置优化级别"
            
            echo "调试信息:"
            grep "CONFIG_DEBUG_INFO" out/.config || echo "未设置调试信息"
            
            echo "LTO设置:"
            grep "CONFIG_LTO" out/.config || echo "未设置LTO"
            
            echo "调度器优化:"
            grep "CONFIG_SCHED" out/.config | grep -v "CONFIG_SCHED_DEBUG" | head -10
          fi
          
          # 分析构建日志中的优化标志
          echo "📊 构建日志分析:"
          if [ -f "build.log" ]; then
            echo "优化标志统计:"
            grep -o " -O[0-9s]" build.log | sort | uniq -c | sort -nr
            
            echo "编译器警告统计:"
            grep -c "warning:" build.log | xargs echo "警告数量:"
            
            echo "错误统计:"
            grep -c "error:" build.log | xargs echo "错误数量:"
            
            # 提取关键模块的编译信息
            echo "关键模块编译信息:"
            for module in "sched" "mm" "fs" "drivers/base" "kernel/irq"; do
              echo "=== $module ==="
              grep -E "($module).* -O" build.log | head -1 | sed 's/.*\(-O[0-9s]\).*/\1/' | uniq || echo "  无记录"
            done
          fi
          
          # 检查生成的内核文件
          echo "📁 内核文件分析:"
          if [ -f "out/vmlinux" ]; then
            echo "文件信息:"
            file out/vmlinux
            ls -lh out/vmlinux | awk '{print "大小:", $5}'
            
            # 检查符号表
            echo "符号信息:"
            nm out/vmlinux 2>/dev/null | wc -l | xargs echo "符号数量:"
            
            # 检查段信息
            echo "段信息:"
            readelf -S out/vmlinux 2>/dev/null | grep -E "text|data|bss" | head -5 || echo "无法读取段信息"
          fi
          
          echo "✅ 增强验证完成"

      - name: 📊 Optimization Summary Report (优化总结报告)
        run: |
          echo "=== 内核优化总结报告 ==="
          cd kernel_workspace/kernel_platform/common
          
          # 生成优化报告
          {
            echo "## 编译优化验证结果"
            echo ""
            echo "### 文件信息"
            echo "- 内核文件: \`out/vmlinux\`"
            if [ -f "out/vmlinux" ]; then
              echo "- 文件大小: $(ls -lh out/vmlinux | awk '{print $5}')"
              echo "- 架构: $(file out/vmlinux | cut -d: -f2 | xargs)"
            fi
            
            echo ""
            echo "### 优化配置"
            if [ -f "out/.config" ]; then
              optimize_config=$(grep "CONFIG_CC_OPTIMIZE" out/.config || echo "未设置")
              debug_config=$(grep "CONFIG_DEBUG_INFO" out/.config || echo "未设置")
              echo "- 优化级别配置: $optimize_config"
              echo "- 调试信息: $debug_config"
            fi
            
            echo ""
            echo "### 编译标志统计"
            if [ -f "build.log" ]; then
              echo "| 优化级别 | 使用次数 |"
              echo "|----------|----------|"
              grep -o " -O[0-9s]" build.log | sort | uniq -c | while read count flag; do
                echo "| $flag | $count |"
              done
            else
              echo "无编译日志数据"
            fi
            
            echo ""
            echo "### 验证结果"
            if [ -f "out/vmlinux" ]; then
              debug_sections=$(readelf -S out/vmlinux 2>/dev/null | grep -c debug || echo "0")
              if [ "$debug_sections" -eq 0 ]; then
                echo "✅ 调试信息已优化移除"
              else
                echo "⚠️ 发现 $debug_sections 个调试段"
              fi
              
              # 检查关键文件是否存在
              if [ -f "out/kernel/sched/core.o" ]; then
                echo "✅ 调度器模块编译成功"
              fi
              if [ -f "out/mm/page_alloc.o" ]; then
                echo "✅ 内存管理模块编译成功"
              fi
            fi
            
            echo ""
            echo "---"
            echo "*生成时间: $(date)*"
          } > optimization_report.md
          
          cat optimization_report.md

      - name: 📁 Upload Optimization Report (上传优化报告)
        uses: actions/upload-artifact@v4
        with:
          name: Optimization-Report-${{ env.DEVICES_NAME }}
          path: kernel_workspace/kernel_platform/common/optimization_report.md

      - name: 📁 Upload Build Log (上传构建日志)
        uses: actions/upload-artifact@v4
        with:
          name: Build-Log-${{ env.DEVICES_NAME }}
          path: kernel_workspace/kernel_platform/common/build.log

      - name: 📦 Make AnyKernel3 (创建Anykernel3)
        run: |
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          ./main.bin "make_anykernel3"
          rm -rf ./main.bin

      - name: 📤 Upload AnyKernel3 (上传 Anykernel3)
        uses: actions/upload-artifact@v4
        with:
          name: AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU
          path: ./AnyKernel3/*
